# A custom GitHub Action for SFTP file deployment based on file checksums.
# This action is designed to be used by other workflows.
# It installs lftp, generates local checksums, compares them with remote checksums,
# and then pushes, removes, or updates only the files that have changed.

name: "Checksum-Based SFTP Deployer"
description: "An SFTP deployment action that uses checksums to intelligently mirror a local directory to a remote host."
branding:
  icon: "check-circle"
  color: "green"

inputs:
  remote-protocol:
    description: "Remote file transfer protocol (sftp)"
    required: true
    default: "sftp"
  remote-host:
    description: "Remote host"
    required: true
  remote-port:
    description: "Remote port"
    required: true
    default: 22
  remote-user:
    description: "SFTP username"
    required: true
  remote-password:
    description: "SFTP password"
    required: true
  local-path:
    description: "Local path to deploy from"
    required: true
  remote-path:
    description: "Remote path on host"
    required: true
  maintenance-page-path:
    description: "Path to the local maintenance page file (app_offline.htm)"
    required: true
  dry-run:
    description: "If true, the action will only print the commands without executing them."
    required: false
    default: "false"
  debug-mode:
    description: "If true, the lftp commands will run in verbose debug mode."
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: "Install dependencies"
      shell: bash
      run: |
        echo "::group::Install packages"
        DEBIAN_FRONTEND=noninteractive sudo apt-get update && sudo apt-get install --no-install-recommends -y lftp
        echo "::endgroup::"

    - name: "Generate local checksums"
      shell: bash
      run: |
        echo "::group::Generating checksums for local files"
        if [ ! -d "${{ inputs.local-path }}" ]; then
          echo "Error: Local path '${{ inputs.local-path }}' is not a directory. Exiting."
          exit 1
        fi
        
        cd "${{ inputs.local-path }}"
        
        # Use find's -print0 and xargs' -0 to handle all filenames and produce
        # checksums with a consistent space separator.
        find . -type f -print0 | xargs -0 md5sum > checksums.txt
        
        echo "::endgroup::"
    
    - name: "Download remote checksums"
      shell: bash
      run: |
        echo "::group::Attempting to download remote checksum file"
        lftp -c "set sftp:auto-confirm yes; open ${{inputs.remote-protocol}}://${{inputs.remote-user}}:${{inputs.remote-password}}@${{inputs.remote-host}}:${{inputs.remote-port}}; \
                  get -O . \"${{inputs.remote-path}}/checksums.txt\" || rm \"./checksums.txt\"" &>/dev/null || true
        mv checksums.txt remote_checksums.txt || touch remote_checksums.txt
        echo "::endgroup::"

    - name: "Compare checksums"
      shell: bash
      id: generate_checksums
      run: |
        echo "::group::Comparing checksums and preparing commands"
        
        # Standardize both files to a tab-separated format
        # This replaces one or more spaces at the beginning of the filename
        # with a single tab, ensuring a clean format for join.
        sed -i -E 's/^([0-9a-f]{32})[[:space:]]+/\1\t/' "${{ inputs.local-path }}/checksums.txt"
        sed -i -E 's/^([0-9a-f]{32})[[:space:]]+/\1\t/' remote_checksums.txt

        # Remove the './' prefix from filenames in both checksum files
        sed -i -E 's/\t\.\//\t/' "${{ inputs.local-path }}/checksums.txt"
        sed -i -E 's/\t\.\//\t/' remote_checksums.txt

        # NEW: Remove any trailing whitespace and/or carriage returns to ensure consistent sorting.
        sed -i -E 's/[\r[:space:]]+$//' "${{ inputs.local-path }}/checksums.txt"
        sed -i -E 's/[\r[:space:]]+$//' remote_checksums.txt

        # Use LC_ALL=C and a tab separator for consistent sorting.
        LC_ALL=C sort -t$'\t' -k 2,2 "${{ inputs.local-path }}/checksums.txt" > local_sorted.txt
        LC_ALL=C sort -t$'\t' -k 2,2 remote_checksums.txt > remote_sorted.txt
        
        echo "# lftp commands generated for deployment" > lftp_commands.txt
        
        if [ "${{ inputs.debug-mode }}" == "true" ]; then
          echo "set sftp:debug 9;" >> lftp_commands.txt
        fi

        # Conditional open command for security
        if [ "${{ inputs.dry-run }}" == "true" ]; then
          printf 'open "%s://%s:%s@%s:%s";\n' \
            "[PROTOCOL]" \
            "[USER]" \
            "[PASSWORD]" \
            "[HOST]" \
            "[PORT]" >> lftp_commands.txt
        else
          printf 'open "%s://%s:%s@%s:%s";\n' \
            "${{ inputs.remote-protocol }}" \
            "${{ inputs.remote-user }}" \
            "${{ inputs.remote-password }}" \
            "${{ inputs.remote-host }}" \
            "${{ inputs.remote-port }}" >> lftp_commands.txt
        fi

    - name: "Upload debug files"
      if: failure() && inputs.dry-run == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: sorted-checksum-files
        path: |
          local_sorted.txt
          remote_sorted.txt
        retention-days: 1
    
    - name: "Generate lftp commands"
      shell: bash
      id: generate_commands
      run: |

        # Get files to add or update
        join -t$'\t' -v 1 local_sorted.txt remote_sorted.txt | awk -F'\t' '{print $2}' > files_to_add_update.txt
        join -t$'\t' local_sorted.txt remote_sorted.txt | awk -F'\t' '{if ($2 != $3) print $1}' >> files_to_add_update.txt
        
        cat files_to_add_update.txt | sort -u > all_files_to_deploy.txt

        declare -A created_dirs
        while IFS= read -r file; do
          remote_file="${{ inputs.remote-path }}/$file"
          remote_dir="$(dirname "$remote_file")"
          
          if [[ -z "${created_dirs["$remote_dir"]}" ]]; then
            printf 'mkdir -p "%s";\n' "$remote_dir" >> lftp_commands.txt
            created_dirs["$remote_dir"]=1
          fi
          
          local_file="${{ inputs.local-path }}/$file"
          printf 'put "%s" -o "%s";\n' "$local_file" "$remote_file" >> lftp_commands.txt
        done < all_files_to_deploy.txt

        # Get files to remove (on remote but not on local)
        join -t$'\t' -v 1 remote_sorted.txt local_sorted.txt | while IFS=$'\t' read -r checksum file; do
          case "$file" in
            "app_offline.htm")
              printf "Skipping removal of maintenance page: %s\n" "$file" >> lftp_commands.txt
              ;;
            wwwroot/umbraco/Data/*)
              printf "Skipping removal of Umbraco Data file: %s\n" "$file" >> lftp_commands.txt
              ;;
            wwwroot/umbraco/Logs/*)
              printf "Skipping removal of Umbraco Logs file: %s\n" "$file" >> lftp_commands.txt
              ;;
            wwwroot/media/*)
              printf "Skipping removal of Umbraco Media file: %s\n" "$file" >> lftp_commands.txt
              ;;
            *)
              printf 'rm "%s/%s";\n' "${{ inputs.remote-path }}" "$file" >> lftp_commands.txt
              ;;
          esac
        done
        
        echo "bye" >> lftp_commands.txt
        echo "::endgroup::"
    
    - name: "Put site in maintenance mode"
      if: inputs.dry-run == 'false'
      shell: bash
      run: |
        echo "::group::Creating maintenance page app_offline.htm to take site offline"
        lftp -c "set sftp:auto-confirm yes; open ${{inputs.remote-protocol}}://${{inputs.remote-user}}:${{inputs.remote-password}}@${{inputs.remote-host}}:${{inputs.remote-port}}; \
                  put \"${{inputs.maintenance-page-path}}\" -o \"${{inputs.remote-path}}/app_offline.htm\""
        echo "::endgroup::"
        
    - name: "Execute lftp commands"
      if: inputs.dry-run == 'false'
      shell: bash
      run: |
        echo "::group::Executing deployment commands"
        lftp -f lftp_commands.txt
        echo "::endgroup::"

    - name: "Dry Run: Displaying commands only"
      if: inputs.dry-run == 'true'
      shell: bash
      run: |
        echo "::group::Dry Run - The following commands would have been executed:"
        cat lftp_commands.txt
        echo "::endgroup::"

    - name: "Upload new checksums file"
      if: inputs.dry-run == 'false'
      shell: bash
      run: |
        echo "::group::Uploading new checksums file"
        lftp -c "set sftp:auto-confirm yes; open ${{inputs.remote-protocol}}://${{inputs.remote-user}}:${{inputs.remote-password}}@${{inputs.remote-host}}:${{inputs.remote-port}}; \
                  put \"${{inputs.local-path}}/checksums.txt\" -o \"${{inputs.remote-path}}/checksums.txt\""
        echo "::endgroup::"

    - name: "Take site out of maintenance mode"
      if: inputs.dry-run == 'false'
      shell: bash
      run: |
        echo "::group::Removing app_offline.htm to bring site online"
        lftp -c "set sftp:auto-confirm yes; open ${{inputs.remote-protocol}}://${{inputs.remote-user}}:${{inputs.remote-password}}@${{inputs.remote-host}}:${{inputs.remote-port}}; \
                  rm \"${{inputs.remote-path}}/app_offline.htm\""
        echo "::endgroup::"