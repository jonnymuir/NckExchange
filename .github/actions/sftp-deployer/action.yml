# A custom GitHub Action for SFTP file deployment based on file checksums.
# This action is designed to be used by other workflows.
# It installs lftp, generates local checksums, compares them with remote checksums,
# and then pushes, removes, or updates only the files that have changed.

name: "Checksum-Based SFTP Deployer"
description: "An SFTP deployment action that uses checksums to intelligently mirror a local directory to a remote host."
branding:
  icon: "check-circle"
  color: "green"

inputs:
  remote-protocol:
    description: "Remote file transfer protocol (sftp)"
    required: true
    default: "sftp"
  remote-host:
    description: "Remote host"
    required: true
  remote-port:
    description: "Remote port"
    required: true
    default: 22
  remote-user:
    description: "SFTP username"
    required: true
  remote-password:
    description: "SFTP password"
    required: true
  local-path:
    description: "Local path to deploy from"
    required: true
  remote-path:
    description: "Remote path on host"
    required: true
  maintenance-page-path:
    description: "Path to the local maintenance page file (app_offline.htm)"
    required: true

runs:
  using: "composite"
  steps:
    - name: "Install dependencies"
      shell: bash
      run: |
        echo "::group::Install packages"
        # We need lftp to handle the SFTP operations.
        # This is optimized for a non-interactive CI/CD environment.
        DEBIAN_FRONTEND=noninteractive sudo apt-get update && sudo apt-get install --no-install-recommends -y lftp
        echo "::endgroup::"

    - name: "Generate local checksums"
      shell: bash
      run: |
        echo "::group::Generating checksums for local files"
        # The 'find' command with '-print0' and 'xargs -0' handles filenames with spaces.
        # This creates a checksum file with full paths relative to the local-path.
        # This will be used as the source of truth for the deployment.
        find "${{ inputs.local-path }}" -type f -print0 | xargs -0 md5sum > local_checksums.txt
        # If the local path is a single file, md5sum won't prepend the path, so we handle that case.
        if ! [ -s local_checksums.txt ]; then
          md5sum "${{ inputs.local-path }}" | sed "s| |  ${{ inputs.local-path }}/|" > local_checksums.txt
        fi
        echo "::endgroup::"
    
    - name: "Download remote checksums"
      shell: bash
      run: |
        echo "::group::Attempting to download remote checksum file"
        # We use lftp to attempt to download the remote checksum file.
        # The '&>/dev/null || true' part handles the case where the file doesn't exist,
        # preventing the workflow from failing.
        lftp -c "set sftp:auto-confirm yes; open ${{inputs.remote-protocol}}://${{inputs.remote-user}}:${{inputs.remote-password}}@${{inputs.remote-host}}:${{inputs.remote-port}}; \
                  get -O . \"${{inputs.remote-path}}/checksums.txt\" || rm \"./checksums.txt\"" &>/dev/null || true
        # Rename the downloaded file for consistency
        mv checksums.txt remote_checksums.txt || touch remote_checksums.txt
        echo "::endgroup::"

    - name: "Compare checksums and generate lftp commands"
      shell: bash
      id: generate_commands
      run: |
        echo "::group::Comparing checksums and preparing commands"
        # This script compares the local and remote checksums and generates a series of
        # lftp commands for pushing, removing, and updating files.
        
        # Create a file to store the lftp commands
        touch lftp_commands.txt
        
        # Add files to be pushed (new or modified)
        while read -r local_checksum local_file; do
          if ! grep -q "$local_checksum  $local_file" remote_checksums.txt; then
            # File is new or has a different checksum. We need to push it.
            # We also need to get the directory path for the file to ensure it exists.
            local_dir="$(dirname "$local_file")"
            echo "mkdir -p \"${{ inputs.remote-path }}/$local_dir\";" >> lftp_commands.txt
            echo "put \"$local_file\" -o \"${{ inputs.remote-path }}/$local_file\";" >> lftp_commands.txt
          fi
        done < local_checksums.txt

        # Add files to be removed
        while read -r remote_checksum remote_file; do
          if ! grep -q "$remote_checksum  $remote_file" local_checksums.txt; then
            # File is in the remote but not the local. We need to remove it.
            echo "rm \"${{ inputs.remote-path }}/$remote_file\";" >> lftp_commands.txt
          fi
        done < remote_checksums.txt

        echo "bye" >> lftp_commands.txt
        echo "::endgroup::"

    - name: "Put site in maintenance mode"
      shell: bash
      run: |
        echo "::group::Creating maintenance page app_offline.htm to take site offline"
        # Use the provided local file path from the new input variable.
        # The 'put' command transfers a file from local to remote.
        lftp -c "set sftp:auto-confirm yes; open ${{inputs.remote-protocol}}://${{inputs.remote-user}}:${{inputs.remote-password}}@${{inputs.remote-host}}:${{inputs.remote-port}}; \
                  put \"${{inputs.maintenance-page-path}}\" -o \"${{inputs.remote-path}}/app_offline.htm\""
        echo "::endgroup::"

    - name: "Execute lftp commands"
      shell: bash
      run: |
        echo "::group::Executing deployment commands"
        # The '-f' flag tells lftp to read commands from a file, which is more robust for large deployments.
        lftp -f lftp_commands.txt
        echo "::endgroup::"

    - name: "Upload new checksums file"
      shell: bash
      run: |
        echo "::group::Uploading new checksums file"
        # This step uploads the new local checksum file to the remote path for the next deployment.
        lftp -c "set sftp:auto-confirm yes; open ${{inputs.remote-protocol}}://${{inputs.remote-user}}:${{inputs.remote-password}}@${{inputs.remote-host}}:${{inputs.remote-port}}; \
                  put local_checksums.txt -o \"${{inputs.remote-path}}/checksums.txt\""
        echo "::endgroup::"

    - name: "Take site out of maintenance mode"
      shell: bash
      run: |
        echo "::group::Removing app_offline.htm to bring site online"
        # Remove the temporary app_offline.htm file to bring the site back online.
        lftp -c "set sftp:auto-confirm yes; open ${{inputs.remote-protocol}}://${{inputs.remote-user}}:${{inputs.remote-password}}@${{inputs.remote-host}}:${{inputs.remote-port}}; \
                  rm \"${{inputs.remote-path}}/app_offline.htm\""
        echo "::endgroup::"
